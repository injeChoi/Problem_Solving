//
//  모음사전.swift
//  Swift_Code
//
//  Created by InJe Choi on 2022/04/01.
//

/*
 특정 인덱스의 문자가 A가 아니라는 것은 그 전에 있을 수 있는 문자가 여러개라는 뜻이다.
 그 수를 어떻게 구하는지가 관건
 
 ex) "AIE"
 "A": 특정 인덱스의 문자가 A이면 A 이전에 올 수 있는 단어는 없으니 1만 증가하고 스킵
 
 "AI": "AI"전에 올 수 있는 단어의 개수 = (I의 인덱스) + (I의 인덱스 - 1) * (5^3 + 5^2 + 5^1)
 why?
 "AI"전에 나올 수 있는 단어는 "AA***" 또는 "AE***"의 형태를 띈다
 이때, *이 등장한 인덱스가 3이므로 "***"의 개수는 5^3 + 5^2 + 5^1 개 이다
 "AA***" 일 때 5^3 + 5^2 + 5^1 개, "AE***" 일 때도 5^3 + 5^2 + 5^1개 이므로
 "AI" 전에 나올 수 있는 단어의 총 개수는 2 * 5^3 + 5^2 + 5^1개 이다
 즉, (I의 인덱스 - 1) * 5^3 + 5^2 + 5^1개
 그리고 "AI" 전에 나오는 2자리 단어의 개수는 "AA", "AE" 2개이므로 "AI"는 2자리 단어 중 3번째로 등장한다
 고로 "AI"는 3 + 2 * 5^3 + 5^2 + 5^1 번째에 등장한다
 
 "AIE"도 같은 로직으로 생각하면
 "AIE" 전에 나올 수 있는 단어는 "AIA**" 형태를 띈다
 이때, *이 등장한 인덱스가 2이므로 "**"의 개수는 5^2 + 5^1 개 이다
 고로 (E의 인덱스 - 1) * 5^2 + 5^1 개 = (2 - 1) * 5^2 + 5^1 개
 그리고 "AI" 고정이면서 "AIE" 전에 나오는 3자리 단어의 개수는 "AIA" 하나이므로 "AIE"는 2번째로 등장한다
 고로 "AIE"는 2 + 1 * 5^2 + 5^1 번째에 등장한다
 
 고로 "AIE"는 (1) + (3 + 2 * 5^3 + 5^2 + 5^1) + (2 + 1 * 5^2 + 5^1) = 346 번째에 나온다
 */

import Foundation

func solution(_ word: String) -> Int {
    let word = Array(word).map { String($0) }
    let vowel = ["A": 1, "E": 2, "I": 3, "O": 4, "U": 5]
    var answer = 0
    
    for idx in 0..<word.count {
        answer += vowel[word[idx]]!
        
        if word[idx] != "A" {
            for i in 1..<5-idx {
                answer += (vowel[word[idx]]! - 1) * Int(pow(Double(5), Double(i)))
            }
        }
    }
    
    return answer
}

// print(solution("AIE"))
